version: "3.8"
services:
  postgres:
    image: postgres:13.1
    restart: always
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 20

  adminer:
    image: adminer:4.8.0
    links:
      - postgres:db
    ports:
      - 8080:8080

  setup:
    image: node:12.20-alpine
    environment:
      NODE_ENV: development
    volumes:
      - .docker-data/node_modules:/usr/src/app/node_modules:cached
      - ./package.json:/usr/src/app/package.json:delegated
      - ./package-lock.json:/usr/src/app/package-lock.json:delegated
    working_dir: /usr/src/app
    entrypoint: ["npm", "install"]

  producer:
    image: node:12.20
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .docker-data/node_modules:/usr/src/app/node_modules:cached
      - ./package.json:/usr/src/app/package.json:delegated
      - ./package-lock.json:/usr/src/app/package-lock.json:delegated
      - ./src:/usr/src/app/src:delegated
    environment:
      NODE_ENV: development
      PGSTRING: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/postgres
    working_dir: /usr/src/app
    entrypoint: ["node", "src/dkr.partitions.js"]
    deploy:
      mode: replicated
      replicas: 10
