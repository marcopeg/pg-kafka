version: "3.8"
services:
  postgres:
    image: postgres:13.1
    restart: always
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 20

  adminer:
    image: adminer:4.8.0
    links:
      - postgres:db
    ports:
      - 8080:8080

  setup:
    image: node:12.20-alpine
    environment:
      NODE_ENV: development
    volumes:
      - .docker-data/node_modules:/usr/src/app/node_modules:cached
      - ./package.json:/usr/src/app/package.json:delegated
      - ./package-lock.json:/usr/src/app/package-lock.json:delegated
    working_dir: /usr/src/app
    entrypoint: ["npm", "install"]

  reset:
    image: node:12.20
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .docker-data/node_modules:/usr/src/app/node_modules:cached
      - ./package.json:/usr/src/app/package.json:delegated
      - ./package-lock.json:/usr/src/app/package-lock.json:delegated
      - ./src:/usr/src/app/src:delegated
      - ./stress_${TARGET}:/usr/src/app/stress_${TARGET}:delegated
    environment:
      NODE_ENV: development
      PGSTRING: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/postgres
    working_dir: /usr/src/app
    entrypoint: ["node", "stress_${TARGET}/${TARGET}.reset.js"]

  results:
    image: node:12.20
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .docker-data/node_modules:/usr/src/app/node_modules:cached
      - .docker-data/stats:/stats:cached
      - ./package.json:/usr/src/app/package.json:delegated
      - ./package-lock.json:/usr/src/app/package-lock.json:delegated
      - ./src:/usr/src/app/src:delegated
      - ./stress_${TARGET}:/usr/src/app/stress_${TARGET}:delegated
    environment:
      NODE_ENV: development
      PGSTRING: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/postgres
      PRODUCER_MAX_PARTITIONS: ${STRESS_PRODUCER_MAX_PARTITIONS:-1}
      PRODUCER_BATCH_SERIAL: ${STRESS_PRODUCER_BATCH_SERIAL:-10}
      PRODUCER_BATCH_PARALLEL: ${STRESS_PRODUCER_BATCH_PARALLEL:-1}
      PRODUCER_REPLICAS: ${STRESS_PRODUCER_REPLICAS:-1}
      CONSUMER1_REPLICAS: ${STRESS_CONSUMER1_REPLICAS:-1}
      CONSUMER1_BATCH_PARALLEL: ${STRESS_CONSUMER1_BATCH_PARALLEL:-1}
      CONSUMER2_REPLICAS: ${STRESS_CONSUMER2_REPLICAS:-1}
      CONSUMER2_BATCH_PARALLEL: ${STRESS_CONSUMER2_BATCH_PARALLEL:-1}
    working_dir: /usr/src/app
    entrypoint: ["node", "stress_${TARGET}/${TARGET}.results.js"]

  producer:
    image: node:12.20
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .docker-data/node_modules:/usr/src/app/node_modules:cached
      - ./package.json:/usr/src/app/package.json:delegated
      - ./package-lock.json:/usr/src/app/package-lock.json:delegated
      - ./src:/usr/src/app/src:delegated
      - ./stress_${TARGET}:/usr/src/app/stress_${TARGET}:delegated
    environment:
      NODE_ENV: development
      PGSTRING: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/postgres
      MAX_PARTITIONS: ${STRESS_PRODUCER_MAX_PARTITIONS:-1}
      BATCH_SERIAL: ${STRESS_PRODUCER_BATCH_SERIAL:-10}
      BATCH_PARALLEL: ${STRESS_PRODUCER_BATCH_PARALLEL:-1}
    working_dir: /usr/src/app
    entrypoint: ["node", "stress_${TARGET}/${TARGET}.producer.js"]
    deploy:
      mode: replicated
      replicas: ${STRESS_PRODUCER_REPLICAS:-1}

  consumer1:
    image: node:12.20
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .docker-data/node_modules:/usr/src/app/node_modules:cached
      - ./package.json:/usr/src/app/package.json:delegated
      - ./package-lock.json:/usr/src/app/package-lock.json:delegated
      - ./src:/usr/src/app/src:delegated
      - ./stress_${TARGET}:/usr/src/app/stress_${TARGET}:delegated
    environment:
      NODE_ENV: development
      PGSTRING: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/postgres
      CLIENT_ID: ${STRESS_CONSUMER1_CLIENT_ID:-c1}
      BATCH_PARALLEL: ${STRESS_CONSUMER1_BATCH_PARALLEL:-1}
    working_dir: /usr/src/app
    entrypoint: ["node", "stress_${TARGET}/${TARGET}.consumer.js"]
    deploy:
      mode: replicated
      replicas: ${STRESS_CONSUMER1_REPLICAS:-1}

  consumer2:
    image: node:12.20
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .docker-data/node_modules:/usr/src/app/node_modules:cached
      - ./package.json:/usr/src/app/package.json:delegated
      - ./package-lock.json:/usr/src/app/package-lock.json:delegated
      - ./src:/usr/src/app/src:delegated
      - ./stress_${TARGET}:/usr/src/app/stress_${TARGET}:delegated
    environment:
      NODE_ENV: development
      PGSTRING: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/postgres
      CLIENT_ID: ${STRESS_CONSUMER2_CLIENT_ID:-c2}
      BATCH_PARALLEL: ${STRESS_CONSUMER2_BATCH_PARALLEL:-1}
    working_dir: /usr/src/app
    entrypoint: ["node", "stress_${TARGET}/${TARGET}.consumer.js"]
    deploy:
      mode: replicated
      replicas: ${STRESS_CONSUMER2_REPLICAS:-1}
